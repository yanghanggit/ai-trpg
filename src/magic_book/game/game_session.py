"""
AI-RPG 游戏框架基础类模块

本模块定义了游戏框架的基础抽象类，为所有游戏类型提供统一的接口和基础功能。
采用抽象基类模式，确保子类实现必要的生命周期方法。
"""

from abc import ABC, abstractmethod
from typing import Final


class GameSession(ABC):
    """
    游戏框架基础抽象类

    所有游戏类型的基类，定义了游戏的基本属性和生命周期方法。
    提供游戏名称管理和优雅退出控制功能。

    主要职责：
    - 游戏实例的标识和命名
    - 游戏生命周期管理（初始化、运行控制、退出）
    - 为具体游戏类型提供统一接口

    设计模式：
    - 抽象基类模式：强制子类实现核心方法
    - 模板方法模式：定义游戏生命周期框架
    """

    def __init__(self, name: str) -> None:
        """
        初始化游戏基础属性

        Args:
            name: 游戏实例的唯一名称，用于标识和日志记录
        """
        self._name: Final[str] = name  # 游戏名称，创建后不可修改
        self._should_terminate: bool = False  # 终止标志，用于优雅退出控制

    # ═══════════════════════════════════════════════════════════════════════
    # 属性访问器 - 游戏基础信息
    # ═══════════════════════════════════════════════════════════════════════

    @property
    def name(self) -> str:
        """
        获取游戏名称

        Returns:
            游戏实例的名称字符串
        """
        return self._name

    # ═══════════════════════════════════════════════════════════════════════
    # 属性访问器 - 游戏状态控制
    # ═══════════════════════════════════════════════════════════════════════

    @property
    def should_terminate(self) -> bool:
        """
        检查游戏是否应该终止

        用于游戏主循环的退出控制，当此属性为 True 时，
        游戏主循环应该优雅地结束并执行清理工作。

        Returns:
            bool: True 表示游戏应该终止，False 表示继续运行
        """
        return self._should_terminate

    @should_terminate.setter
    def should_terminate(self, value: bool) -> None:
        """
        设置游戏终止标志

        当需要结束游戏时（如用户输入退出命令、系统关闭等），
        设置此标志为 True，游戏主循环将在下次检查时优雅退出。

        Args:
            value: True 表示请求终止游戏，False 表示继续运行
        """
        self._should_terminate = value

    # ═══════════════════════════════════════════════════════════════════════
    # 抽象方法 - 子类必须实现的生命周期方法
    # ═══════════════════════════════════════════════════════════════════════

    @abstractmethod
    async def initialize(self) -> None:
        """
        异步初始化游戏

        子类必须实现此方法来完成游戏的初始化工作，包括但不限于：
        - 加载游戏数据和配置
        - 初始化游戏世界和角色
        - 设置游戏系统和管道
        - 建立外部连接（如数据库、AI服务等）

        注意：此方法是异步的，可以执行耗时的初始化操作
        """
        pass

    @abstractmethod
    def exit(self) -> None:
        """
        同步退出游戏

        子类必须实现此方法来完成游戏的清理和退出工作，包括但不限于：
        - 保存游戏状态和进度
        - 释放系统资源（文件句柄、网络连接等）
        - 关闭后台任务和线程
        - 执行最终的清理操作

        注意：此方法是同步的，应该快速完成清理工作
        """
        pass
